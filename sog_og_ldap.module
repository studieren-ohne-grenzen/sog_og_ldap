<?php
/**
 * @file
 * Map LDAP DNs or RDNs to Organic groups.
 *
 * @author Kale Worsley kale@egressive.com (https://www.drupal.org/project/og_ldap; original author)
 * @author Sebastian Leidig sebastian.leidig@gmail.com (adaptions for this fork of the module)
 */

/**
 * Implementation of hook_user().
 * Main entry point for synchronization.
 */
function sog_og_ldap_user($op, &$edit, &$account, $category = NULL) {
    static $og_done = FALSE; // Used to only add users to OG once per load
    if ($op == 'login' && $og_done == FALSE) {
        $og_done = TRUE;
        // Don't touch users who are not LDAP authenticated
        if (!isset($account->ldap_authentified)) {
            return;
        }
        if (!$account->ldap_authentified) {
            return;
        }
        _sog_og_ldap_update_user($account);
    }
}

/**
 * Syncronise the Groups a user is in with LDAP.
 * @param object $account The drupal account object of the user to be synchronized.
 */
function _sog_og_ldap_update_user($account) {
    // http://drupalcontrib.org/api/drupal/contributions!og!og.module/function/og_get_types/6
    $grouptypes = og_get_types('group');
    foreach ($grouptypes as $type) {
        if (variable_get('og_ldap_'. $type, 0)) {
            /* Get a list of existing OG nodes */
            $result = db_query("SELECT n.title FROM {node} n WHERE n.type = '%s'", $type);
            $all_groups = array();
            while ($node = db_fetch_object($result)) {
                $all_groups[] = $node->title;
            }

            /* Get a list of groups the user is in from OG */
            // http://drupalcontrib.org/api/drupal/contributions!og!og.module/function/og_get_subscriptions/6
            $subs = og_get_subscriptions($account->uid);

            /* Find a list of groups the user is in from LDAP */
            $groups = _sog_og_ldap_get_groups($account, $type);

            if ($groups) {
            /* Create any non-existant groups and add the user to all groups */
                foreach ($groups as $group) {
                    $group_name = $group['og'];
                    /* Create the group if it doesn't already exist */
                    if (!in_array($group_name, $all_groups)) {
                        // logging: https://www.drupal.org/project/flog
                        flog_it($group, 'Group');
                        flog_it($type, 'Type');
                        _sog_og_ldap_add_group($group, $type);
                    }

                    /* Add the user to the OG group */
                    $sql = "SELECT n.nid FROM {node} n, {og} og WHERE n.nid = og.nid AND n.title = '%s' AND n.type = '%s'";
                    $result = db_query_range($sql, array($group_name, $type), 0, 1);
                    $row = db_fetch_array($result);
                    if ($row) {
                        $gid = $row['nid'];
                        // http://drupalcontrib.org/api/drupal/contributions!og!og.module/function/og_save_subscription/6
                        og_save_subscription($gid, $account->uid, array('is_active' => TRUE));
                        /* Remove the gid from the subs array. The groups left will be unsubscribed from */
                        if (isset($subs[$gid])) {
                            unset($subs[$gid]);
                        }
                    }
                }
            }

            /* Remove the user from groups when they are in OG but not in LDAP */
            if (variable_get('og_ldap_ldap_only_'. $type, 0)) {
                foreach ($subs as $sub) {
                    // http://drupalcontrib.org/api/drupal/contributions!og!og.module/function/og_delete_subscription/6
                    og_delete_subscription($sub['nid'], $sub['uid']);
                }
            }
        }
    }
}

/**
 * Return an array of groups for an account.
 * @param object $account The drupal account object of the user to be synchronized.
 * @param type $type A drupal content type used as organic group.
 */
function _sog_og_ldap_get_groups($account, $type) {
    global $_ldapauth_ldap;
    module_load_include('module', 'ldapgroups', 'ldapgroups'); //don't know whether we really need this
    module_load_include('inc', 'ldapgroups', 'ldapgroups');

    // Setup the global $_ldapgroups_ldap object.
    if (!_ldapgroups_ldap_init($sid)) {
        drupal_set_message(t('Could not initialize the LDAP connection object!'), 'error');
        return FALSE;
    }

    // Use the lookup dn/password or announymous if not set.
    // Note: This may fail if LDAP security limits access to needed info.
    $bind_dn = $_ldapgroups_ldap->getOption('binddn');
    $pass = $_ldapgroups_ldap->getOption('bindpw');
    if (!$_ldapgroups_ldap->connect($bind_dn, $pass)) {
        $bind_name = empty($bind_dn ) ? t("anonymous") : $bind_dn;
        drupal_set_message(t('Could not bind to the LDAP server as @name!', array('@name' => $bind_name)), 'error');
        return FALSE;
    }


    $attr_name = variable_get('og_ldap_attribute_'. $type, 'description');
    $attr_value = variable_get('og_ldap_value_'. $type, 'DrupalGroups');

    // of ldap_integration module
    // TODO: is this appropriate to use from this module or should it only be used from within ldap_integration?
    $groups = _ldapgroups_detect_groups($account);

    if (!$groups) {
        return FALSE;
    }

    $og_groups = array();
    if (!$_ldapauth_ldap->connection) {
        if (!$_ldapauth_ldap->connect() || !$_ldapauth_ldap->connection) {
            return FALSE;
        }
    }

    $ogmap = _sog_og_ldap_og_map($type);
    if (is_array($ogmap)) {
        foreach ($groups as $group) {
            foreach ($ogmap as $map) {
                if (strstr($group, $map['ldap'])) {
                    $og_groups[] = $map;
                }
            }
        }
    }

    foreach ($groups as $group) {
        $attributes = $_ldapauth_ldap->retrieveAttributes($group);
        if (!isset($attributes[$attr_name])) {
            continue;
        }
        // Find if the group is a drupal group
        foreach ($attributes[$attr_name] as $item) {
            if (strstr($item, $attr_value) != FALSE) {
                $og_groups[] = array('og' => _og_cn_name($group), 'ldap' => $group);
            }
        }
    }

    return $og_groups;
}

/**
 * Helper function: if group doesn't exist, add it
 */
function _sog_og_ldap_add_group($group, $type) {
    $group_name = $group['og'];
    $result = db_result(db_query("SELECT n.title FROM {node} n WHERE n.type = '%s' AND n.title = '%s'", variable_get('og_ldap_group_type_'. $type, 'group'), $group_name));
    if (!$result) {
        // TODO: This needs a config form (for og settings etc)
        $node = new stdClass();
        $node->type = $type;
        $node->uid = 1;
        $node->status = TRUE;
        $node->title = $group_name;

        /* OG stuff */
        $node->og_public = TRUE;
        $node->og_register = FALSE;
        $node->og_directory = TRUE;
        $node->og_description = $group_name;
        $node->og_website = '';
        $node->og_selective = OG_CLOSED;

        node_save($node);
    }
}

/**
 * Parse the group strings and return an array of og groups and the matching ldap group
 */
function _sog_og_ldap_og_map($type) {
    $array = array();
    $str = variable_get('og_ldap_groups_'. $type, '');
    $lines = explode("\n", $str);
    foreach ($lines as $line) {
        $chunks = explode('|', trim($line));
        $array[] = array('ldap' => trim($chunks[0]), 'og' => trim($chunks[1]));
    }
    return $array;
}

/**
 * Get the cn from a group string
 */
function _og_cn_name($group) {
    $cn = explode(',', $group);
    if (drupal_substr($cn[0], 0, 2) == 'cn') {
        $group_name = explode('=', $cn[0]);
        $group_name = $group_name[1];
    }
    return $group_name;
}










/**
 * Implementation of hook_perm().
 * Create drupal permission.
 */
function sog_og_ldap_perm() {
    return array('administer og ldap');
}

/**
 * Implementation of hook_menu().
 * Create drupal admin menu.
 */
function sog_og_ldap_menu() {
    return array(
        'admin/settings/ldap/oggroups' => array(
            'title' => 'Organic groups LDAP integration',
            'description' => 'Configure synchronization between LDAP groups and organic groups.',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('sog_og_ldap_admin'),
            'access arguments' => array('administer og ldap'),
        ),
    );
}

/**
 * Create the OG LDAP admin form
 */
function sog_og_ldap_admin() {
    $grouptypes = og_get_types('group');

    foreach ($grouptypes as $type) {
        $name = node_get_types('name', array('type' => $type));

        $form['group_type_'. $type] = array(
            '#type' => 'fieldset',
            '#title' => t($name),
            '#collapsible' => TRUE,
            '#collapsed' => !variable_get('og_ldap_'. $type, 0)
        );

        $form['group_type_'. $type]['og_ldap_'. $type] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable'),
            '#default_value' => variable_get('og_ldap_'. $type, 0),
            '#description' => t('Should this group type by synced with LDAP?'),
        );

        $form['group_type_'. $type]['attr_value'] = array(
            '#type' => 'fieldset',
            '#title' => t('Attribute - Value method'),
            '#collapsible' => TRUE,
            '#collapsed' => variable_get('og_ldap_attribute_'. $type, '') == '' && variable_get('og_ldap_value_'. $type, '') == '',
            '#description' => t('This method lets you define an attribute - value pair that will be used to map LDAP groups to Organic Groups. The first CN value will be used as the Organic Group name.'),
        );

        $form['group_type_'. $type]['attr_value']['og_ldap_attribute_'. $type] = array(
            '#type' => 'textfield',
            '#title' => t('Attribute'),
            '#description' => t('The attribute used to mark Organic Groups groups in LDAP'),
            '#default_value' => variable_get('og_ldap_attribute_'. $type, ''),
        );

        $form['group_type_'. $type]['attr_value']['og_ldap_value_'. $type] = array(
            '#type' => 'textfield',
            '#title' => t('Value'),
            '#description' => t('The value used to mark Organic Groups groups in LDAP'),
            '#default_value' => variable_get('og_ldap_value_'. $type, ''),
        );

        $form['group_type_'. $type]['map'] = array(
            '#type' => 'fieldset',
            '#title' => t('Mapping Method'),
            '#collapsible' => TRUE,
            '#collapsed' => variable_get('og_ldap_groups_'. $type, '') == '',
            '#description' => t('This method lets you make a direct mapping between LDAP groups and Organic Group.'),
        );

        $form['group_type_'. $type]['map']['og_ldap_groups_'. $type] = array(
            '#type' => 'textarea',
            '#title' => t('Mapping of LDAP groups to Organic Groups'),
            '#default_value' => variable_get('og_ldap_groups_'. $type, ''),
            '#description' => t('Enter a list of LDAP groups and their Organic Group mappings, one per line with a | delimiter. Should be in the form [ldap group]|[organic group title].'),
        );

        $form['group_type_'. $type]['og_ldap_ldap_only_'. $type] = array(
            '#type' => 'checkbox',
            '#title' => t('LDAP members only'),
            '#default_value' => variable_get('og_ldap_ldap_only_'. $type, 0),
            '#description' => t('Should members of an organic group that are not a member of a coresponding LDAP group be removed?'),
        );

    }

    return system_settings_form($form);
}